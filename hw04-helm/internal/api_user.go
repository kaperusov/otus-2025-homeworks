/*
 * User Service
 *
 * This is simple client API
 *
 * API version: 1.0.0
 * Contact: schetinnikov@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"

	"otus/crud/internal/models"

	"github.com/gorilla/mux"
	"gorm.io/gorm"
)

var db *gorm.DB

// Функция инициализации (вызывается из main)
func SetDB(database *gorm.DB) {
	db = database
}

// CreateUser godoc
// @Summary Создать нового пользователя
// @Description Создает нового пользователя в системе
// @Tags Пользователи
// @Accept json
// @Produce json
// @Param user body models.User true "Данные пользователя"
// @Success 200 {object} models.User "Успешно создан"
// @Failure 400 {object} models.ErrorResponse "Неверные входные данные"
// @Failure 500 {object} models.ErrorResponse "Ошибка сервера"
// @Router /users [post]
func CreateUser(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	var user models.User
	err := json.NewDecoder(r.Body).Decode(&user)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	//Создание записи
	db.Create(&user)
	w.Header().Set("Content-Type", "application/json")
	if err := json.NewEncoder(w).Encode(user); err != nil {
		log.Printf("Failed to encode response: %v", err)
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
}

// FindUserById godoc
// @Summary Найти пользователя по ID
// @Description Возвращает информацию о пользователе по его идентификатору
// @Tags Пользователи
// @Produce json
// @Param id path int true "ID пользователя"
// @Success 200 {object} models.User "Успешный запрос"
// @Failure 404 {object} models.ErrorResponse "Пользователь не найден"
// @Failure 500 {object} models.ErrorResponse "Ошибка сервера"
// @Router /users/{id} [get]
func FindUserById(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	vars := mux.Vars(r)
	id := vars["userId"]

	// Чтение записи
	var user models.User
	db.First(&user, "id = ?", id)
	fmt.Printf("User: %+v\n", user)
	if err := json.NewEncoder(w).Encode(user); err != nil {
		log.Printf("Failed to encode response: %v", err)
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
}

// UpdateUser godoc
// @Summary Обновить данные пользователя
// @Description Обновляет информацию о пользователе
// @Tags Пользователи
// @Accept json
// @Produce json
// @Param id path int true "ID пользователя"
// @Param user body models.User true "Обновленные данные пользователя"
// @Success 200 {object} models.User "Успешно обновлен"
// @Failure 400 {object} models.ErrorResponse "Неверные входные данные"
// @Failure 404 {object} models.ErrorResponse "Пользователь не найден"
// @Failure 500 {object} models.ErrorResponse "Ошибка сервера"
// @Router /users/{id} [put]
func UpdateUser(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	vars := mux.Vars(r)
	id := vars["userId"]

	var user models.User
	err := json.NewDecoder(r.Body).Decode(&user)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	user.Id, err = strconv.ParseInt(id, 10, 64)
	if err != nil {
		// ... handle error
		panic(err)
	}

	// Редактирование записи
	db.Save(&user)
	fmt.Printf("User: %+v\n", user)
	if err := json.NewEncoder(w).Encode(user); err != nil {
		log.Printf("Failed to encode response: %v", err)
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
}

// DeleteUser godoc
// @Summary Удалить пользователя
// @Description Удаляет пользователя по его идентификатору
// @Tags Пользователи
// @Produce json
// @Param id path int true "ID пользователя"
// @Success 200 {object} models.StatusResponse "Успешно удален"
// @Failure 404 {object} models.ErrorResponse "Пользователь не найден"
// @Failure 500 {object} models.ErrorResponse "Ошибка сервера"
// @Router /users/{id} [delete]
func DeleteUser(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	vars := mux.Vars(r)
	id := vars["userId"]

	// Удаление записи
	var user models.User
	db.Delete(&user, "id = ?", id)
	fmt.Printf("User: %+v\n", user)
	if err := json.NewEncoder(w).Encode(user); err != nil {
		log.Printf("Failed to encode response: %v", err)
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
}
