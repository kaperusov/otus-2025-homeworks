{
	"info": {
		"_postman_id": "5bac7502-1474-484c-9ed7-0c4aa203742b",
		"name": "REST API hw07",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "296292",
		"_collection_link": "https://smk-systems.postman.co/workspace/%D0%90%D0%A1%D0%9A%D0%A3%D0%AD-%D0%A0%D0%96%D0%94~7f775539-e843-4229-81d8-7102ff5a9832/collection/296292-5bac7502-1474-484c-9ed7-0c4aa203742b?action=share&source=collection_link&creator=296292"
	},
	"item": [
		{
			"name": "Register user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"New user created\", function() {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"const responseData = pm.response.json();",
							"//console.log(\"responseData:\", responseData);",
							"const username = responseData.user.username;",
							"const email = responseData.user.email;",
							"const id = responseData.user.id",
							"pm.collectionVariables.set(\"userUsername\", username);",
							"pm.collectionVariables.set(\"userEmail\", email);",
							"pm.collectionVariables.set(\"userId\", id);",
							"console.log(\"Created new user with username:\", username);",
							"console.log(\"User ID:\", id);",
							"console.log(\"User email:\", email);",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "{{$randomUserName}}",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{$randomEmail}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123",
							"type": "text"
						},
						{
							"key": "firstName",
							"value": "{{$randomUserName}}",
							"type": "text"
						},
						{
							"key": "lastName",
							"value": "{{$randomUserName}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/auth/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create billing account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Account created\", function() {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": \"{{userId}}\",\n    \"email\": \"{{userEmail}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/billing/accounts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"billing",
						"accounts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deposit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();",
							"",
							"const baseDepositeAmount = pm.environment.get(\"baseDepositeAmount\")",
							"pm.test(\"Deposit successful\", function() {",
							"    // Проверяем, что баланс равен сумме депозита",
							"    pm.expect(responseData.balance).to.equal(baseDepositeAmount);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": \"{{userId}}\",\n    \"amount\": {{baseDepositeAmount}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/billing/deposit",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"billing",
						"deposit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();",
							"pm.environment.set(\"price\", responseData.price)",
							"",
							"pm.test(\"New order created\", function() {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"price\": 20,\n    \"userId\": \"{{userId}}\",\n    \"name\": \"Bitcoin\",\n    \"description\": \"Your Bitcoin: {{$randomBitcoin}}\" \n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/order",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check account balance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();",
							"const baseDepositeAmount = pm.collectionVariables.get(\"baseDepositeAmount\")",
							"const price = pm.environment.get(\"price\")",
							"const currentBalance = responseData.balance",
							"",
							"// Сохраняем текущий баланс в переменную",
							"pm.collectionVariables.set(\"currentBalance\", currentBalance)",
							"",
							"pm.test(\"Balance is correct\", function() {",
							"    // Проверяем, что баланс уменьшился на сумму заказа",
							"    pm.expect(currentBalance).to.equal(baseDepositeAmount - price);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/billing/accounts/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"billing",
						"accounts",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check notifications",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/notification",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"notification"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create BIG order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();",
							"pm.test(\"Order canceled\", function() {",
							"    // Проверяем, что баланс уменьшился на сумму заказа",
							"    pm.expect(responseData.status).to.equal(\"CANCELLED\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"price\": 2000,\n    \"userId\": \"{{userId}}\",\n    \"name\": \"Bitcoin\",\n    \"description\": \"Your Bitcoin: {{$randomBitcoin}}\" \n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/order",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check account balance again",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();",
							"const baseDepositeAmount = pm.collectionVariables.get(\"baseDepositeAmount\")",
							"const price = pm.environment.get(\"price\")",
							"pm.test(\"Balance is correct\", function() {",
							"    // Проверяем, что баланс уменьшился на сумму заказа",
							"    pm.expect(responseData.balance).to.equal(baseDepositeAmount - price);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/billing/accounts/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"billing",
						"accounts",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check notifications again",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/notification",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"notification"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://arch.homework",
			"type": "default"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "baseDepositeAmount",
			"value": "100",
			"type": "default"
		},
		{
			"key": "currentBalance",
			"value": ""
		},
		{
			"key": "user_1_username",
			"value": ""
		},
		{
			"key": "user_1_id",
			"value": ""
		},
		{
			"key": "userUsername",
			"value": ""
		},
		{
			"key": "userEmail",
			"value": ""
		}
	]
}